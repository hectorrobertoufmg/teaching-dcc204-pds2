#+title: Notas de Aula - 13 POO: Classes
#+author: Luigi D. C. Soares
#+startup: entitiespretty
#+options: toc:nil  num:nil
* Recapitulando...

- Classes são abstrações de conceitos
- Representam uma categoria de elementos
- Conjunto de elementos -> atributos e operações em comum -> Classe
- Classes "não existem" em tempo de execução, o que existem são objetos
- Objetos são *instâncias* de classes, representam elementos em particular

- Classes suportam os conceitos de Encapsulamento, Herança e Polimorfismo (que veremos mais a frente)
- Em C++, os termos "class" e "struct" representam a mesma coisa, mudando apenas a visibilidade padrão (private vs public, já vimos isso ao longo da disciplina, mas hoje vamos reforçar)

- Pensando em boas práticas, não faz sentido utilizar "class" e "struct" de forma "aleatória". Defina um estilo e siga-o de forma consistente. Você pode usar apenas class, ou apenas struct, ou talvez usar struct apenas para agrupamento de dados e class para todo o resto (tudo que contém operações). O importante é ser consistente!

- Minha conveção:
  - struct para agrupamento de dados, class para todo o resto
  - struct/class nomeadas no formato PascalCase
  - atributos/métodos públicos nomeados no formato snake\under{}case
  - atributos/método privaos nomeados no formato \under{}snake\under{}case (com o o prefixo \under{}) (exceção: construtores privados)

* Componentes de uma Classe

Tipos de componentes:
- Membros de instância vs membros de classe (estáticos)
- Procedimentos de inicialização e destruição

** Membros de Instância

- Espaço de memória alocado para *cada* objeto
- Referenciados através de *cada* objeto
- Todo objeto possui um ponteiro para si mesmo, utilizado para acessar seus atributos e métodos

Vamos ver um exemplo:

point.hpp (versão 1)

#+begin_src C++ :main no :tangle point_v1.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  std::string to_string() const;
  void update(double x, double y);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v1.cpp
#include "point_v1.hpp"

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}
#+end_src

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v1.cpp :results scalar
#include <iostream>
#include "point_v1.hpp"

int main() {
  Point p1;
  Point *p2 = new Point();
  Point p3 = {};

  std::cout << "p1: " << p1.to_string() << std::endl;
  std::cout << "p2: " << p2->to_string() << std::endl;
  std::cout << "p3: " << p3.to_string() << std::endl;

  p1.update(1, 2);
  p2->update(3, 3);
  p3.update(13, 29);
  
  std::cout << "p1: " << p1.to_string() << std::endl;
  std::cout << "p2: " << p2->to_string() << std::endl;
  std::cout << "p3: " << p3.to_string() << std::endl;
  
  delete p2;
  return 0;
}
#+end_src

#+RESULTS:
: p1: (9.88131e-324, -2.96439e-323)
: p2: (0, 0)
: p3: (0, 0)
: p1: (1, 2)
: p2: (3, 3)
: p3: (13, 29)

- Note que, por padrão, os membros de uma classe não são inicializados (verifique o caso do p1)
- Quando alocamos a classe no heap (através do operador new), a inicialização dos membros acontece
- Também podemos inicializar com valores padrão, atribuindo "{}" (confira a inicialização do p3)
- De qualquer forma, nem tudo é automaticamente inicializado, então é boa prática garantir que os objetos sejam criados em um estado inicial bem definido (por ex, usando construtores, veremos mais a frente)

Até agora, nada de novo...

** Membros de Classe

- Não estão associados a uma instância específica, são atributos da *classe*
- São compartilhados por todas as instâncias
- Ocupam espaço único na memória
- Geralmente são utilizados para definição de constantes, mas não precisam ser constantes
- Atributos de classe, quando não constantes, são como variáveis globais, e isso é *perigoso* (dê um google: "why are global variables evil?")
- Em C++, membros de classe são definidos com a palavra chave ~static~

*** Atributos

Voltando ao nosso Ponto, vamos ver um exemplo de um atributo de classe. Vamos tentar contar quantos pontos existem no programa (apenas para fins didáticos!):

- Vamos criar um atributo estático num\under{}points
- Durante muito tempo, a inicialização *devia sempre ser feita no .cpp* (se versão < C++17, ainda é o caso)
- Do C++17 para frente, há uma outra opção: declarar o atributo com a palavra-chave ~inline~
- Vamos adicionar um construtor, e incrementar o número de pontos sempre que um novo for criado

point.hpp (versão 2)

#+begin_src C++ :main no :tangle point_v2.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  static inline unsigned num_points = 0;

  Point(double x, double y);
  
  std::string to_string() const;
  void update(double x, double y);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v2.cpp
#include "point_v2.hpp"

Point::Point(double x, double y) : x(x), y(y) {
  num_points++;
}

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}
#+end_src

main.cpp:

- Nos referimos ao membro de classe com o prefixo Classe::
- Note que o membro existe mesmo antes de qualquer objeto ser criado

#+begin_src C++ :flags -std=c++17 -I. point_v2.cpp :results scalar
#include <iostream>
#include "point_v2.hpp"

int main() {
  std::cout << Point::num_points << std::endl;
  
  Point p1(1, 2);
  std::cout << Point::num_points << std::endl;
  
  Point p2(3, 2.5);
  std::cout << Point::num_points << std::endl;
  
  return 0;
}
#+end_src

#+RESULTS:
: 0
: 1
: 2

*** Métodos

Também podemos ter métodos de classe. Por exemplo, podemos criar um método "distancia" para calcular a distância entre dois points. Para utilizar esse método, faríamos ~Point::distancia(p1, p2)~. Perceba que é bem semelhante ao efeito de um namespace + função (que seria uma outra forma de implementar).

point.hpp (versão 3):

#+begin_src C++ :main no :tangle point_v3.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  Point(double x, double y);
  
  std::string to_string() const;
  void update(double x, double y);

  static double distance(const Point &p1, const Point &p2);
};

#endif
#+end_src

point.cpp:

- Note que a palavra static não aparece no .cpp!

#+begin_src C++ :main no :tangle point_v3.cpp
#include "point_v3.hpp"
#include <cmath>

Point::Point(double x, double y) : x(x), y(y) { }

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v3.cpp :results scalar
#include <iostream>
#include "point_v3.hpp"

int main() {
  Point p1(1, 2);
  Point p2(3, 2.5);
  std::cout << Point::distance(p1, p2) << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: 2.06155

** Construtores e Destrutores

Como é o ciclo de vida de um objeto?
- Ele nasce (chamada ao construtor)
- Ele é utilizado (acesso aos campos, operações)
- Ele morre (saí de escopo, chamada ao destrutor)

- O construtor sempre leva o mesmo nome da classe
- O destrutor sempre leva o mesmo nome da classe, precedido por um til (~)

Quando não definimos nenhum construtor, existe um construtor padrão implícito, sem parâmetros

point.hpp (versão 4):

#+begin_src C++ :main no :tangle point_v4.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  std::string to_string() const;
  void update(double x, double y);

  static double distance(const Point &p1, const Point &p2);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v4.cpp
#include "point_v3.hpp"
#include <cmath>

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

main.cpp:

- Note que, no caso de um construtor padrão, não existe o "()" na frente do nome da variável.

#+begin_src C++ :flags -std=c++17 -I. point_v4.cpp :results scalar
#include <iostream>
#include "point_v4.hpp"

int main() {
  Point p1;
  std::cout << p1.x << ", " << p1.y << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: 6.90834e-310, 6.90834e-310

Quando definimos um construtor, o construtor padrão deixa de existir. Vamos voltar para nossa versão 3:

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v3.cpp :results scalar
#include <iostream>
#include "point_v3.hpp"

int main() {
  // Point p1; // Não funciona! Erro!
  Point p2(1, 2);
  return 0;
}
#+end_src

Vamos adicionar um destrutor, e tentar enxergar o ciclo de vida de um ponto.

point.hpp (versão 5):

#+begin_src C++ :main no :tangle point_v5.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  Point(double x, double y);
  ~Point();
  
  std::string to_string() const;
  void update(double x, double y);

  static double distance(const Point &p1, const Point &p2);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v5.cpp
#include "point_v5.hpp"
#include <cmath>
#include <iostream>

Point::Point(double x, double y) : x(x), y(y) {
  std::cout
    << "Oba, estou sendo criado ;)" << std::endl
    << "Definindo x = " << x << std::endl
    << "Definindo y = " << y << std::endl;
}

Point::~Point() {
  std::cout
    << "Até logo, até mais ver, bon voyage, arrivederci, "
    << "até mais, adeus, boa viagem, vá em paz, "
    << "que a porta bata onde o sol não bate, "
    << "não volte mais aqui, hasta la vista baby, "
    << "escafeda-se e saia logo daqui."
    << std::endl;
}

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

Quando a vida de um objeto chega ao fim?
- Stack: ao fim de uma função, if, for, etc
- Heap: após um delete
  
main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v5.cpp :results scalar
#include <iostream>
#include "point_v5.hpp"

int main() {
  Point p(1, 2);
  p.update(1, 3.1415);
  std::cout << p.to_string() << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: Oba, estou sendo criado ;)
: Definindo x = 1
: Definindo y = 2
: (1, 3.1415)
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.

Não há muito o que falar sobre destrutores, vamos podemos brincar um pouco com construtores.

*** Múltiplos Construtores

Podemos ter mais de um construtor, cada um recebendo diferentes números de parâmetros (polimorfismo, veremos mais a frente):

point.hpp (versão 6):

#+begin_src C++ :main no :tangle point_v6.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  Point();
  Point(double xy);
  Point(double x, double y);
  ~Point();
  
  std::string to_string() const;
  void update(double x, double y);

  static double distance(const Point &p1, const Point &p2);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v6.cpp
#include "point_v6.hpp"
#include <cmath>
#include <iostream>

Point::Point() : x(0), y(0) {};
Point::Point(double xy) : x(xy), y(xy) {}
Point::Point(double x, double y) : x(x), y(y) {
  std::cout
    << "Oba, estou sendo criado ;)" << std::endl
    << "Definindo x = " << x << std::endl
    << "Definindo y = " << y << std::endl;
}

Point::~Point() {
  std::cout
    << "Até logo, até mais ver, bon voyage, arrivederci, "
    << "até mais, adeus, boa viagem, vá em paz, "
    << "que a porta bata onde o sol não bate, "
    << "não volte mais aqui, hasta la vista baby, "
    << "escafeda-se e saia logo daqui."
    << std::endl;
}

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v6.cpp :results scalar
#include <iostream>
#include "point_v6.hpp"

int main() {
  Point p1;
  Point p2(2);
  return 0;
}
#+end_src

#+RESULTS:
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.

Hmmm, por quê nossa mensagem de inicialização não foi mostrada?
- A mensagem está apenas no construtor com dois parâmetros
  
Então, vamos ter que duplicar o código?
- Não! Podemos chamar um construtor na lista de inicialização!

point.cpp:

#+begin_src C++ :main no :tangle point_v6b.cpp
#include "point_v6.hpp"
#include <cmath>
#include <iostream>

Point::Point() : Point(0) {};
Point::Point(double xy) : Point(xy, xy) {}
Point::Point(double x, double y) : x(x), y(y) {
  std::cout
    << "Oba, estou sendo criado ;)" << std::endl
    << "Definindo x = " << x << std::endl
    << "Definindo y = " << y << std::endl;
}

Point::~Point() {
  std::cout
    << "Até logo, até mais ver, bon voyage, arrivederci, "
    << "até mais, adeus, boa viagem, vá em paz, "
    << "que a porta bata onde o sol não bate, "
    << "não volte mais aqui, hasta la vista baby, "
    << "escafeda-se e saia logo daqui."
    << std::endl;
}

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v6b.cpp :results scalar
#include <iostream>
#include "point_v6.hpp"

int main() {
  Point p1;
  Point p2(2);
  return 0;
}
#+end_src

#+RESULTS:
: Oba, estou sendo criado ;)
: Definindo x = 0
: Definindo y = 0
: Oba, estou sendo criado ;)
: Definindo x = 2
: Definindo y = 2
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.

*** Construtor de Cópia

Existe um construtor especial chamado de "construtor de cópia" (copy constructor). Como não o definimos, um construtor padrão foi copiado, o que significa que podemos criar um ponto a partir de outro:

#+begin_src C++ :flags -std=c++17 -I. point_v6b.cpp :results scalar
#include <iostream>
#include "point_v6.hpp"

int main() {
  Point p1(1, 1);
  Point p2(p1);
  std::cout << p2.to_string() << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: Oba, estou sendo criado ;)
: Definindo x = 1
: Definindo y = 1
: (1, 1)
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.

Nossa mensagem de inicialização não apareceu de novo ;(

Vamos criar o nosso próprio construtor de cópia!

point.hpp (versão 7):

#+begin_src C++ :main no :tangle point_v7.hpp
#ifndef POINT_H
#define POINT_H

#include <string>
#include <sstream>

class Point {
public:
  double x;
  double y;

  Point();
  Point(double xy);
  Point(double x, double y);
  Point(const Point &p); // Construtor de cópia
  ~Point();
  
  std::string to_string() const;
  void update(double x, double y);

  static double distance(const Point &p1, const Point &p2);
};

#endif
#+end_src

point.cpp:

#+begin_src C++ :main no :tangle point_v7.cpp
#include "point_v7.hpp"
#include <cmath>
#include <iostream>

Point::Point() : Point(0) {};
Point::Point(double xy) : Point(xy, xy) {}

Point::Point(double x, double y) : x(x), y(y) {
  std::cout
    << "Oba, estou sendo criado ;)" << std::endl
    << "Definindo x = " << x << std::endl
    << "Definindo y = " << y << std::endl;
}

Point::Point(const Point &p) : Point(p.x, p.y) {}

Point::~Point() {
  std::cout
    << "Até logo, até mais ver, bon voyage, arrivederci, "
    << "até mais, adeus, boa viagem, vá em paz, "
    << "que a porta bata onde o sol não bate, "
    << "não volte mais aqui, hasta la vista baby, "
    << "escafeda-se e saia logo daqui."
    << std::endl;
}

std::string Point::to_string() const {
  std::ostringstream v;
  v << "(" << x << ", " << y << ")";
  return v.str();
}

void Point::update(double x, double y) {
  // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  this->x = x;
  this->y = y;
}

double Point::distance(const Point &p1, const Point &p2) {
  return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}
#+end_src

main.cpp:

#+begin_src C++ :flags -std=c++17 -I. point_v7.cpp :results scalar
#include <iostream>
#include "point_v7.hpp"

int main() {
  Point p1(1, 1);
  Point p2(p1);
  std::cout << p2.to_string() << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: Oba, estou sendo criado ;)
: Definindo x = 1
: Definindo y = 1
: Oba, estou sendo criado ;)
: Definindo x = 1
: Definindo y = 1
: (1, 1)
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.
: Até logo, até mais ver, bon voyage, arrivederci, até mais, adeus, boa viagem, vá em paz, que a porta bata onde o sol não bate, não volte mais aqui, hasta la vista baby, escafeda-se e saia logo daqui.
