                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                    NOTAS DE AULA - 13 POO: CLASSES

                           Luigi D. C. Soares
                   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


Recapitulando…
══════════════

  • Classes são abstrações de conceitos
  • Representam uma categoria de elementos
  • Conjunto de elementos -> atributos e operações em comum -> Classe
  • Classes "não existem" em tempo de execução, o que existem são
    objetos
  • Objetos são *instâncias* de classes, representam elementos em
    particular

  • Classes suportam os conceitos de Encapsulamento, Herança e
    Polimorfismo (que veremos mais a frente)
  • Em C++, os termos "class" e "struct" representam a mesma coisa,
    mudando apenas a visibilidade padrão (private vs public, já vimos
    isso ao longo da disciplina, mas hoje vamos reforçar)

  • Pensando em boas práticas, não faz sentido utilizar "class" e
    "struct" de forma "aleatória". Defina um estilo e siga-o de forma
    consistente. Você pode usar apenas class, ou apenas struct, ou
    talvez usar struct apenas para agrupamento de dados e class para
    todo o resto (tudo que contém operações). O importante é ser
    consistente!

  • Minha conveção:
    • struct para agrupamento de dados, class para todo o resto
    • struct/class nomeadas no formato PascalCase
    • atributos/métodos públicos nomeados no formato snake_case
    • atributos/método privaos nomeados no formato _snake_case (com o o
      prefixo _) (exceção: construtores privados)


Componentes de uma Classe
═════════════════════════

  Tipos de componentes:
  • Membros de instância vs membros de classe (estáticos)
  • Procedimentos de inicialização e destruição


Membros de Instância
────────────────────

  • Espaço de memória alocado para *cada* objeto
  • Referenciados através de *cada* objeto
  • Todo objeto possui um ponteiro para si mesmo, utilizado para acessar
    seus atributos e métodos

  Vamos ver um exemplo:

  point.hpp (versão 1)

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v1.hpp"
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  └────

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v1.hpp"
  │ 
  │ int main() {
  │   Point p1;
  │   Point *p2 = new Point();
  │   Point p3 = {};
  │ 
  │   std::cout << "p1: " << p1.to_string() << std::endl;
  │   std::cout << "p2: " << p2->to_string() << std::endl;
  │   std::cout << "p3: " << p3.to_string() << std::endl;
  │ 
  │   p1.update(1, 2);
  │   p2->update(3, 3);
  │   p3.update(13, 29);
  │ 
  │   std::cout << "p1: " << p1.to_string() << std::endl;
  │   std::cout << "p2: " << p2->to_string() << std::endl;
  │   std::cout << "p3: " << p3.to_string() << std::endl;
  │ 
  │   delete p2;
  │   return 0;
  │ }
  └────

  • Note que, por padrão, os membros de uma classe não são inicializados
    (verifique o caso do p1)
  • Quando alocamos a classe no heap (através do operador new), a
    inicialização dos membros acontece
  • Também podemos inicializar com valores padrão, atribuindo "{}"
    (confira a inicialização do p3)
  • De qualquer forma, nem tudo é automaticamente inicializado, então é
    boa prática garantir que os objetos sejam criados em um estado
    inicial bem definido (por ex, usando construtores, veremos mais a
    frente)

  Até agora, nada de novo…


Membros de Classe
─────────────────

  • Não estão associados a uma instância específica, são atributos da
    *classe*
  • São compartilhados por todas as instâncias
  • Ocupam espaço único na memória
  • Geralmente são utilizados para definição de constantes, mas não
    precisam ser constantes
  • Atributos de classe, quando não constantes, são como variáveis
    globais, e isso é *perigoso* (dê um google: "why are global
    variables evil?")
  • Em C++, membros de classe são definidos com a palavra chave `static'


Atributos
╌╌╌╌╌╌╌╌╌

  Voltando ao nosso Ponto, vamos ver um exemplo de um atributo de
  classe. Vamos tentar contar quantos pontos existem no programa (apenas
  para fins didáticos!):

  • Vamos criar um atributo estático num_points
  • Durante muito tempo, a inicialização *devia sempre ser feita no
    .cpp* (se versão < C++17, ainda é o caso)
  • Do C++17 para frente, há uma outra opção: declarar o atributo com a
    palavra-chave `inline'
  • Vamos adicionar um construtor, e incrementar o número de pontos
    sempre que um novo for criado

  point.hpp (versão 2)

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   static inline unsigned num_points = 0;
  │ 
  │   Point(double x, double y);
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v2.hpp"
  │ 
  │ Point::Point(double x, double y) : x(x), y(y) {
  │   num_points++;
  │ }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  └────

  main.cpp:

  • Nos referimos ao membro de classe com o prefixo Classe::
  • Note que o membro existe mesmo antes de qualquer objeto ser criado

  ┌────
  │ #include <iostream>
  │ #include "point_v2.hpp"
  │ 
  │ int main() {
  │   std::cout << Point::num_points << std::endl;
  │ 
  │   Point p1(1, 2);
  │   std::cout << Point::num_points << std::endl;
  │ 
  │   Point p2(3, 2.5);
  │   std::cout << Point::num_points << std::endl;
  │ 
  │   return 0;
  │ }
  └────


Métodos
╌╌╌╌╌╌╌

  Também podemos ter métodos de classe. Por exemplo, podemos criar um
  método "distancia" para calcular a distância entre dois points. Para
  utilizar esse método, faríamos `Point::distancia(p1, p2)'. Perceba que
  é bem semelhante ao efeito de um namespace + função (que seria uma
  outra forma de implementar).

  point.hpp (versão 3):

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   Point(double x, double y);
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ 
  │   static double distance(const Point &p1, const Point &p2);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  • Note que a palavra static não aparece no .cpp!

  ┌────
  │ #include "point_v3.hpp"
  │ #include <cmath>
  │ 
  │ Point::Point(double x, double y) : x(x), y(y) { }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v3.hpp"
  │ 
  │ int main() {
  │   Point p1(1, 2);
  │   Point p2(3, 2.5);
  │   std::cout << Point::distance(p1, p2) << std::endl;
  │   return 0;
  │ }
  └────


Construtores e Destrutores
──────────────────────────

  Como é o ciclo de vida de um objeto?
  • Ele nasce (chamada ao construtor)
  • Ele é utilizado (acesso aos campos, operações)
  • Ele morre (saí de escopo, chamada ao destrutor)

  • O construtor sempre leva o mesmo nome da classe
  • O destrutor sempre leva o mesmo nome da classe, precedido por um til
    (~)

  Quando não definimos nenhum construtor, existe um construtor padrão
  implícito, sem parâmetros

  point.hpp (versão 4):

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ 
  │   static double distance(const Point &p1, const Point &p2);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v3.hpp"
  │ #include <cmath>
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  main.cpp:

  • Note que, no caso de um construtor padrão, não existe o "()" na
    frente do nome da variável.

  ┌────
  │ #include <iostream>
  │ #include "point_v4.hpp"
  │ 
  │ int main() {
  │   Point p1;
  │   std::cout << p1.x << ", " << p1.y << std::endl;
  │   return 0;
  │ }
  └────

  Quando definimos um construtor, o construtor padrão deixa de
  existir. Vamos voltar para nossa versão 3:

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v3.hpp"
  │ 
  │ int main() {
  │   // Point p1; // Não funciona! Erro!
  │   Point p2(1, 2);
  │   return 0;
  │ }
  └────

  Vamos adicionar um destrutor, e tentar enxergar o ciclo de vida de um
  ponto.

  point.hpp (versão 5):

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   Point(double x, double y);
  │   ~Point();
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ 
  │   static double distance(const Point &p1, const Point &p2);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v5.hpp"
  │ #include <cmath>
  │ #include <iostream>
  │ 
  │ Point::Point(double x, double y) : x(x), y(y) {
  │   std::cout
  │     << "Oba, estou sendo criado ;)" << std::endl
  │     << "Definindo x = " << x << std::endl
  │     << "Definindo y = " << y << std::endl;
  │ }
  │ 
  │ Point::~Point() {
  │   std::cout
  │     << "Até logo, até mais ver, bon voyage, arrivederci, "
  │     << "até mais, adeus, boa viagem, vá em paz, "
  │     << "que a porta bata onde o sol não bate, "
  │     << "não volte mais aqui, hasta la vista baby, "
  │     << "escafeda-se e saia logo daqui."
  │     << std::endl;
  │ }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  Quando a vida de um objeto chega ao fim?
  • Stack: ao fim de uma função, if, for, etc
  • Heap: após um delete

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v5.hpp"
  │ 
  │ int main() {
  │   Point p(1, 2);
  │   p.update(1, 3.1415);
  │   std::cout << p.to_string() << std::endl;
  │   return 0;
  │ }
  └────

  Não há muito o que falar sobre destrutores, vamos podemos brincar um
  pouco com construtores.


Múltiplos Construtores
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  Podemos ter mais de um construtor, cada um recebendo diferentes
  números de parâmetros (polimorfismo, veremos mais a frente):

  point.hpp (versão 6):

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   Point();
  │   Point(double xy);
  │   Point(double x, double y);
  │   ~Point();
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ 
  │   static double distance(const Point &p1, const Point &p2);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v6.hpp"
  │ #include <cmath>
  │ #include <iostream>
  │ 
  │ Point::Point() : x(0), y(0) {};
  │ Point::Point(double xy) : x(xy), y(xy) {}
  │ Point::Point(double x, double y) : x(x), y(y) {
  │   std::cout
  │     << "Oba, estou sendo criado ;)" << std::endl
  │     << "Definindo x = " << x << std::endl
  │     << "Definindo y = " << y << std::endl;
  │ }
  │ 
  │ Point::~Point() {
  │   std::cout
  │     << "Até logo, até mais ver, bon voyage, arrivederci, "
  │     << "até mais, adeus, boa viagem, vá em paz, "
  │     << "que a porta bata onde o sol não bate, "
  │     << "não volte mais aqui, hasta la vista baby, "
  │     << "escafeda-se e saia logo daqui."
  │     << std::endl;
  │ }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v6.hpp"
  │ 
  │ int main() {
  │   Point p1;
  │   Point p2(2);
  │   return 0;
  │ }
  └────

  Hmmm, por quê nossa mensagem de inicialização não foi mostrada?
  • A mensagem está apenas no construtor com dois parâmetros

  Então, vamos ter que duplicar o código?
  • Não! Podemos chamar um construtor na lista de inicialização!

  point.cpp:

  ┌────
  │ #include "point_v6.hpp"
  │ #include <cmath>
  │ #include <iostream>
  │ 
  │ Point::Point() : Point(0) {};
  │ Point::Point(double xy) : Point(xy, xy) {}
  │ Point::Point(double x, double y) : x(x), y(y) {
  │   std::cout
  │     << "Oba, estou sendo criado ;)" << std::endl
  │     << "Definindo x = " << x << std::endl
  │     << "Definindo y = " << y << std::endl;
  │ }
  │ 
  │ Point::~Point() {
  │   std::cout
  │     << "Até logo, até mais ver, bon voyage, arrivederci, "
  │     << "até mais, adeus, boa viagem, vá em paz, "
  │     << "que a porta bata onde o sol não bate, "
  │     << "não volte mais aqui, hasta la vista baby, "
  │     << "escafeda-se e saia logo daqui."
  │     << std::endl;
  │ }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v6.hpp"
  │ 
  │ int main() {
  │   Point p1;
  │   Point p2(2);
  │   return 0;
  │ }
  └────


Construtor de Cópia
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  Existe um construtor especial chamado de "construtor de cópia" (copy
  constructor). Como não o definimos, um construtor padrão foi copiado,
  o que significa que podemos criar um ponto a partir de outro:

  ┌────
  │ #include <iostream>
  │ #include "point_v6.hpp"
  │ 
  │ int main() {
  │   Point p1(1, 1);
  │   Point p2(p1);
  │   std::cout << p2.to_string() << std::endl;
  │   return 0;
  │ }
  └────

  Nossa mensagem de inicialização não apareceu de novo ;(

  Vamos criar o nosso próprio construtor de cópia!

  point.hpp (versão 7):

  ┌────
  │ #ifndef POINT_H
  │ #define POINT_H
  │ 
  │ #include <string>
  │ #include <sstream>
  │ 
  │ class Point {
  │ public:
  │   double x;
  │   double y;
  │ 
  │   Point();
  │   Point(double xy);
  │   Point(double x, double y);
  │   Point(const Point &p); // Construtor de cópia
  │   ~Point();
  │ 
  │   std::string to_string() const;
  │   void update(double x, double y);
  │ 
  │   static double distance(const Point &p1, const Point &p2);
  │ };
  │ 
  │ #endif
  └────

  point.cpp:

  ┌────
  │ #include "point_v7.hpp"
  │ #include <cmath>
  │ #include <iostream>
  │ 
  │ Point::Point() : Point(0) {};
  │ Point::Point(double xy) : Point(xy, xy) {}
  │ 
  │ Point::Point(double x, double y) : x(x), y(y) {
  │   std::cout
  │     << "Oba, estou sendo criado ;)" << std::endl
  │     << "Definindo x = " << x << std::endl
  │     << "Definindo y = " << y << std::endl;
  │ }
  │ 
  │ Point::Point(const Point &p) : Point(p.x, p.y) {}
  │ 
  │ Point::~Point() {
  │   std::cout
  │     << "Até logo, até mais ver, bon voyage, arrivederci, "
  │     << "até mais, adeus, boa viagem, vá em paz, "
  │     << "que a porta bata onde o sol não bate, "
  │     << "não volte mais aqui, hasta la vista baby, "
  │     << "escafeda-se e saia logo daqui."
  │     << std::endl;
  │ }
  │ 
  │ std::string Point::to_string() const {
  │   std::ostringstream v;
  │   v << "(" << x << ", " << y << ")";
  │   return v.str();
  │ }
  │ 
  │ void Point::update(double x, double y) {
  │   // Quem é o parâmetro "x" e o atributo "x"? Como diferenciar? ponteiro this
  │   this->x = x;
  │   this->y = y;
  │ }
  │ 
  │ double Point::distance(const Point &p1, const Point &p2) {
  │   return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
  │ }
  └────

  main.cpp:

  ┌────
  │ #include <iostream>
  │ #include "point_v7.hpp"
  │ 
  │ int main() {
  │   Point p1(1, 1);
  │   Point p2(p1);
  │   std::cout << p2.to_string() << std::endl;
  │   return 0;
  │ }
  └────


Exemplo: Validação de Campos
════════════════════════════

  • Suponha que desejamos construir uma classe Pessoa, que possui um
    nome
  • Esta classe fará parte do sistema de um cartório
  • Os nomes precisam de uma certa validação. Para nosso exemplo, a
    validação será: um nome não pode conter números

  Para fazer isso, vamos juntar alguns conceitos que vimos hoje (e um
  que já vimos, mas iremos reforçar na próxima aula: encapsulamento).

  Desejamos validar o nome durante a construção do objeto Pessoa, mas o
  que fazer caso a validação falhe?
  • Uma opção seria lançar uma exceção, assunto de aulas futuras!
  • Como ainda não conhecemos exceções, uma alternativa é impedir o uso
    de construtores!
  • Outra opção seria criar uma flag is_valid, e delegar ao usuário da
    classe a checagem

  Passo a passo:
  • Vamos tornar o nome privado (aqui entra o encapsulamento), para
    impedir manipulações indesejadas.
  • Vamos *deletar* o construtor padrão, e criar um construtor privado
  • Ao invés de um construtor, vamos definir um método estático que
    retornará ou uma Pessoa ou um Error. Para isso, vamos utilizar um
    tipo que foi introduzido na biblioteca do C++ 17, o
    std::variant. Basicamente, é um union mais seguro.

  error.hpp:

  ┌────
  │ #ifndef ERROR_H
  │ #define ERROR_H
  │ 
  │ #include <string>
  │ 
  │ struct Error {
  │   int code;
  │   std::string message;
  │ };
  │ 
  │ #endif
  └────

  person.hpp:

  ┌────
  │ #ifndef PERSON_H
  │ #define PERSON_H
  │ 
  │ #include "error.hpp"
  │ #include <string>
  │ #include <variant>
  │ 
  │ class Person {
  │ public:
  │   Person() = delete; // Deletando o construtor padrão!!!
  │ 
  │   std::string name() const;
  │   static std::variant<Person, Error> make(std::string name);
  │ 
  │ private:
  │   std::string _name;
  │   Person(std::string name);
  │ };
  │ 
  │ #endif
  └────

  person.cpp

  ┌────
  │ #include "person.hpp"
  │ 
  │ Person::Person(std::string name) : _name(name) {}
  │ std::string Person::name() const { return _name; }
  │ 
  │ std::variant<Person, Error> Person::make(std::string name) {
  │   for (char c : name) {
  │     if (std::isdigit(c)) {
  │       Error err = {100, "Nome inválido: contém números!"};
  │       return err;
  │     }
  │   }
  │ 
  │   return Person(name);
  │ }
  └────

  main.cpp:

  ┌────
  │ #include "error.hpp"
  │ #include "person.hpp"
  │ #include <iostream>
  │ 
  │ int main() {
  │   auto chico = Person::make("Chico Lírio");
  │   if (std::holds_alternative<Error>(chico)) {
  │     Error err = std::get<Error>(chico);
  │     std::cout
  │       << "Erro: " << err.message
  │       << " (código " << err.code << ")"
  │       << std::endl;
  │   } else {
  │     Person p = std::get<Person>(chico);
  │     std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  │   }
  │ 
  │   auto oliveira = Person::make("1 2 3 de Oliveira 4");
  │   if (std::holds_alternative<Error>(oliveira)) {
  │     Error err = std::get<Error>(oliveira);
  │     std::cout
  │       << "Erro: " << err.message
  │       << " (código " << err.code << ")"
  │       << std::endl;
  │   } else {
  │     Person p = std::get<Person>(oliveira);
  │     std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  │   }
  │ 
  │   // Note que não conseguimos usar construtores:
  │   // Person p1; // Construtor padrão não existe
  │   // Person p2("teste"); // Construtor privado
  │ 
  │   return 0;
  │ }
  └────
