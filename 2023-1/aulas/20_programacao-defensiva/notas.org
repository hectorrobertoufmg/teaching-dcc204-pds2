#+title: Notas de Aula - 20 Programação Defensiva
#+author: Luigi D. C. Soares
#+startup: entitiespretty
#+options: toc:nil  num:nil
#+property: header-args :results scalar
- Já ouviu falar em "Direção Defensiva"? O que é?
- O que você entende por "Programação Defensiva"? Como relacionar as duas coisas?
- Já vimos algum exemplo de programação defensiva ao longo do curso?
- Você se lembra da classe Pessoa, quando adicionamos um processo de validação do nome?

=error.hpp=

#+begin_src C++ :main no :tangle error.hpp
#ifndef ERROR_H
#define ERROR_H

#include <string>

struct Error {
  int code;
  std::string message;
};

#endif
#+end_src

=person.hpp=

#+begin_src C++ :main no :tangle person.hpp
#ifndef PERSON_H
#define PERSON_H

#include "error.hpp"
#include <string>
#include <variant>

class Person {
public:
  Person() = delete; // Deletando o construtor padrão!!!
  
  std::string name() const;
  static std::variant<Person, Error> make(std::string name);
  
private:
  std::string _name;
  Person(std::string name); // Construtor privado!
};

#endif
#+end_src

=person.cpp=

#+begin_src C++ :main no :tangle person.cpp
#include "person.hpp"

Person::Person(std::string name) : _name(name) {}
std::string Person::name() const { return _name; }

std::variant<Person, Error> Person::make(std::string name) {
  for (char c : name) {
    if (std::isdigit(c)) {
      Error err = {100, "Nome inválido: contém números!"};
      return err;
    }
  }

  return Person(name);
}
#+end_src

=main.cpp=

#+begin_src C++ :flags -std=c++17 -I. person.cpp :results scalar :exports both
#include "error.hpp"
#include "person.hpp"
#include <iostream>

int main() {
  auto chico = Person::make("Chico Lírio");
  if (std::holds_alternative<Error>(chico)) {
    Error err = std::get<Error>(chico);
    std::cout
      << "Erro: " << err.message
      << " (código " << err.code << ")"
      << std::endl;
  } else {
    Person p = std::get<Person>(chico);
    std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  }

  auto oliveira = Person::make("1 2 3 de Oliveira 4");
  if (std::holds_alternative<Error>(oliveira)) {
    Error err = std::get<Error>(oliveira);
    std::cout
      << "Erro: " << err.message
      << " (código " << err.code << ")"
      << std::endl;
  } else {
    Person p = std::get<Person>(oliveira);
    std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  }

  // Note que não conseguimos usar construtores:
  // Person p1; // Construtor padrão não existe
  // Person p2("teste"); // Construtor privado
  
  return 0;
}
#+end_src

#+RESULTS:
: Yey, uma pessoa: Chico Lírio
: Erro: Nome inválido: contém números! (código 100)

- O que fizemos neste exemplo?
- Onde está a programação defensiva?
- O que poderíamos fazer de diferente? O que seria "não defensivo"?
  - E se, ao invés de lidarmos com o processo de validação e impedir a criação do objeto no caso de falha, tivéssemos delegado isso ao usuário?
  - Como? Adicionando um método ~is_valid~ e deixando a cargo do usuário lembrar de sempre fazer esta verificação!
  - Você vê algum problema nisso? que poderia acontecer?

** Robustez vs Corretude

- O que você entende por "Robustez"?
- E por "Corretude"?
- Robustez está relacionado a tentar permitir que o software continue
  funcionando, ainda que isto possa levar a resultados imprecisos
- Corretude signifca nunca retornar um resultado impreciso
- Qual priorizar?

- O que é o fatorial de um número?
- n! = n * (n - 1) * ... * 1
- E se o número for negativo? A definição acima funciona?
- Considere a seguinte implementação da função fatorial
  - O quão robusto é este código?
  - O que acontecerá no caso de n = -2?

#+begin_src C++ :flags -std=c++17 :exports both
#include <iostream>

int factorial(int n) {
  int f = 1;
  for (int i = 1; i <= n; i++) {
    f *= i;
  }
  return f;
}

int main() {
  std::cout << factorial(-2) << std::endl;
}
#+end_src

#+RESULTS:
: 1

- E agora? Pior ou melhor?
- Como resolver?
  
#+begin_src C++ :flags -std=c++17 :exports code
#include <iostream>

int factorial(int n) {
  return n == 0 ? 1 : n * factorial(n-1);
}

int main() {
  std::cout << factorial(-2) << std::endl;
}
#+end_src

** Validação de Entradas + Barricadas

- Muitas vezes não temos controle sobre as entradas
- Podem ser inesperadas e imprevisíveis
- Podem, inclusive, ser mal-intencionadas
- Sempre assuma o pior de todas as entradas
- Defina um conjunto de valores válidos e valide cada entrada
- Defina um comportamento para entradas incorretas
  - Terminar a execução?
  - Repetir?
  - Emitir algum alerta?

- Como isso se encaixa no exemplo da classe Pessoa?
- Qual comportamento adotamos?

- A ideia aqui é criarmos *Barricadas* no programa, para impedir ou minimizar o dano causado por dados incorretos
- Barricadas são códigos intermediários responsáveis pela validação dos dados
- Podem ser classes intermediárias, mas também podemos pensar em termos da própria classe
  - Métodos públicos: validam os dados externos (localize isto na classe Pessoa)
  - Métodos privados: assumem que os dados são seguros (localize isto na classe Pessoa)

- Como testar se as validações estão corretas? (quem valida as validações?)
  
** Asserções

- Uma forma de verificar erros durante a execução de um programa é por meio de asserções (assert)

- Voltando a classe Pessoa, como checar no construtor que, de fato, a entrada é segura?
  (afinal de contas, ele é um método privado)
- O que acontecerá no código a seguir?
  
=person.cpp=

#+begin_src C++ :main no :tangle person_v2.cpp
#include "person.hpp"
#include <cassert>

bool name_has_number(std::string name) {
  for (char c : name) {
    if (std::isdigit(c)) return true;
  }
  return false;
}

Person::Person(std::string name) {
  assert(!name_has_number(name) && "Erro fatal: nome contém números!");
  _name = name;
}

std::string Person::name() const { return _name; }

std::variant<Person, Error> Person::make(std::string name) {
  if (!name_has_number(name)) {
    return Error{100, "Nome inválido: contém números!"};
  }

  return Person(name);
}
#+end_src

=main.cpp=

#+begin_src C++ :flags -std=c++17 -I. person_v2.cpp :results silent :exports code
#include "error.hpp"
#include "person.hpp"
#include <iostream>

int main() {
  auto oliveira = Person::make("1 2 3 de Oliveira 4");
  if (std::holds_alternative<Error>(oliveira)) {
    Error err = std::get<Error>(oliveira);
    std::cout
      << "Erro: " << err.message
      << " (código " << err.code << ")"
      << std::endl;
  } else {
    Person p = std::get<Person>(oliveira);
    std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  }

  return 0;
}
#+end_src

#+begin_example
Assertion `!name_has_number(name) && "Erro fatal: nome contém números!"' failed.
#+end_example

- Oops, parece que erramos algo na refatoração do código... o quê?
- A asserção ajudou a capturar o erro durante o desenvolvimento!
- E se precisássemos adicionar uma outra validação? Imagine que, agora, queremos validar se o nome contém pontuações como vírgula, exclamação, interrogação, etc... (vamos fazer só vírgula, para ilustrar)
- O que fazer primeiro? Vamos criar a validação e adicionar uma nova asserção!

=person.cpp=

#+begin_src C++ :main no :tangle person_v3.cpp
#include "person.hpp"
#include <cassert>

bool name_has_number(std::string name) {
  for (char c : name) {
    if (std::isdigit(c)) return true;
  }
  return false;
}

bool name_has_comma(std::string name) {
  for (char c : name) {
    if (c == ',') return true;
  }
  return false;
}

Person::Person(std::string name) {
  assert(!name_has_number(name) && "Erro fatal: nome contém números!");
  assert(!name_has_comma(name) && "Erro fatal: nome contém vírgulas!");
  _name = name;
}

std::string Person::name() const { return _name; }

std::variant<Person, Error> Person::make(std::string name) {
  if (name_has_number(name)) {
    return Error{100, "Nome inválido: contém números!"};
  }

  return Person(name);
}
#+end_src

=main.cpp=

#+begin_src C++ :flags -std=c++17 -I. person_v3.cpp :results silent :exports code
#include "error.hpp"
#include "person.hpp"
#include <iostream>

int main() {
  auto oliveira = Person::make("Oliveira, José");
  if (std::holds_alternative<Error>(oliveira)) {
    Error err = std::get<Error>(oliveira);
    std::cout
      << "Erro: " << err.message
      << " (código " << err.code << ")"
      << std::endl;
  } else {
    Person p = std::get<Person>(oliveira);
    std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  }

  return 0;
}
#+end_src

#+begin_example
Assertion `!name_has_comma(name) && "Erro fatal: nome contém vírgulas!"' failed
#+end_example

- Novamente, a asserção ajudou a capturar o erro de implementação

=person.cpp=

#+begin_src C++ :main no :tangle person_v4.cpp
#include "person.hpp"
#include <cassert>

bool name_has_number(std::string name) {
  for (char c : name) {
    if (std::isdigit(c)) return true;
  }
  return false;
}

bool name_has_comma(std::string name) {
  for (char c : name) {
    if (c == ',') return true;
  }
  return false;
}

Person::Person(std::string name) {
  assert(!name_has_number(name) && "Erro fatal: nome contém números!");
  assert(!name_has_comma(name) && "Erro fatal: nome contém vírgulas!");
  _name = name;
}

std::string Person::name() const { return _name; }

std::variant<Person, Error> Person::make(std::string name) {
  if (name_has_number(name)) {
    return Error{100, "Nome inválido: contém números!"};
  }

  if (name_has_comma(name)) {
    return Error{101, "Nome inválido: contém vírgulas!"};
  }
  
  return Person(name);
}
#+end_src

=main.cpp=

#+begin_src C++ :flags -std=c++17 -I. person_v4.cpp :results scalar :exports both
#include "error.hpp"
#include "person.hpp"
#include <iostream>

int main() {
  auto oliveira = Person::make("Oliveira, José");
  if (std::holds_alternative<Error>(oliveira)) {
    Error err = std::get<Error>(oliveira);
    std::cout
      << "Erro: " << err.message
      << " (código " << err.code << ")"
      << std::endl;
  } else {
    Person p = std::get<Person>(oliveira);
    std::cout << "Yey, uma pessoa: " << p.name() << std::endl;
  }

  return 0;
}
#+end_src

#+RESULTS:
: Erro: Nome inválido: contém vírgulas! (código 101)

- Agora a validação foi feita corretamente no passo intermediário (barricada) e devolvida ao usuário
  
- Faz sentido mantermos as asserções no código final?
  - Qual o custo das asserções?
  - O que fazer? Podemos utilizar a macro ~NDEBUG~

- No código:
  - Antes de incluir a biblioteca
  - Basta comentar, para habilitar as asserções

#+begin_src c++ :results none
#define NDEBUG
#include <cassert>
#+end_src

- No comando de compilação, via ~-DNDEBUG~

** Programação por Contrato

- O que o contrato espera?
- O que o contrato garante?
- O que o contrato mantém?
- Formalização lógica:
  - {Pré-condições} *ação* {Pós-condições}
  - {Invariantes}

- Você já ouviu falar do algoritmo de busca binária?
  - Considere uma lista ordenada
  - Se o elemento do meio da lista é o que estamos buscando, acabou
  - Se não, ou o elemento está na sublista da esquerda ou da direita
  - Por exemplo, considere a chamada
     ~binary_search(3, [1, 2, 3, 4, 5, 6, 7])~

#+begin_example
[1, 2, 3, 4, 5, 6, 7]
meio = 4 != 3
3 está na sublista da esquerda

[1, 2, 3, 4]
meio = 2 \neq 3
3 está na sublista da direita

[3, 4]
meio = 3, encontramos!
#+end_example

- Quais as pré-condições deste algoritmo?
  - A lista precisa estar ordenada
    
- E as pós-condições?
  - Imagine que a função retorna o índice do elemento, se
    encontrado, ou -1 caso contrário
  - Consegue pensar em alguma pós-condição?

- Vamos começar com a pré-condição: a lista está ordenada?

#+begin_src C++ :flags -std=c++17 :results none
#include <iostream>
#include <vector>
#include <cassert>

template <typename T>
bool sorted(std::vector<T> xs) {
  for (std::size_t i = 0; i < xs.size() - 1; i++) {
    if (xs[i] > xs[i + 1]) return false;
  }
  return true;
}

template <typename T>
int binary_search(T x, std::vector<T> xs) {
  assert(sorted(xs) && "Pre-condition broken: input list is not sorted!");
}
#+end_src

- E a pós-condição: se o índice a ser retornado é >= 0,
  então ele é (i) < que o tamanho da lista e (ii) o elemento
  naquele índice com certeza é o que buscamos

#+begin_src C++ :flags -std=c++17 :results none
#include <iostream>
#include <vector>
#include <cassert>

template <typename T>
bool sorted(std::vector<T> xs) {
  for (std::size_t i = 0; i < xs.size() - 1; i++) {
    if (xs[i] > xs[i + 1]) return false;
  }
  return true;
}

template <typename T>
int binary_search(T x, std::vector<T> xs) {
  assert(sorted(xs) && "Pre-condition broken: input list is not sorted!");
  int index = -1;
  // ...
  assert((index < 0 || (index < xs.size() && xs[index] == x))
	 && "Post-condition broken: index returned is wrong!");
}
#+end_src

- Agora vamos implementar a função:

#+begin_src C++ :flags -std=c++17 :exports both
#include <iostream>
#include <vector>
#include <cassert>

template <typename T>
bool sorted(std::vector<T> xs) {
  for (std::size_t i = 0; i < xs.size() - 1; i++) {
    if (xs[i] > xs[i + 1]) return false;
  }
  return true;
}

template <typename T>
int binary_search(T x, std::vector<T> xs) {
  assert(sorted(xs) && "Pre-condition broken: input list is not sorted!");
  int index = -1;
  int start = 0;
  int end = xs.size() - 1;

  while (start <= end) {
    int mid = (start + end) / 2;
    if (x == xs[mid]) {
      index = mid;
      break;
    }

    if (x < xs[mid]) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }
  
  assert((index < 0 || (index < xs.size() && xs[index] == x))
	 && "Post-condition broken: index returned is wrong!");
  
  return index;
}

int main() {
  std::vector<int> xs = {1, 2, 3, 4, 5, 6, 7};
  std::cout << binary_search(3, xs) << std::endl;
  std::cout << binary_search(8, xs) << std::endl;
  std::vector<int> ys = {2, 1, 3, 4, 5, 6, 7};
  std::cout << binary_search(3, ys) << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: 2
: -1

- O erro capturado pela asserção:
  
#+begin_example
int binary_search(T, std::vector<T>) [with T = int]: Assertion `sorted(xs) && "Pre-condition broken: input list is not sorted!"' failed.
#+end_example

- E em relação a invariantes? Você entende o que é isso?
- Um *invariante de loop* é uma condição que
  - É verdadeira no início de cada iteração
  - Se mantém verdadeira ao final de cada iteração
- Observe o laço de repetição na implementação da busca binária
  - Você consegue identificar alguma propriedade interessante que está sendo mantida a cada iteração do laço?
  - Pense na pós-condição, será que tem algo parecido que podemos garantir a cada iteração?
  - Se o elemento x existe na lista, então ele existe na sublista [start, end]
  - Precisamos de uma espécie de "oráculo" em que confiamos, para realizar esta asserção (confuso? lembre-se que as asserções não farão parte do código final)

#+begin_src C++ :flags -std=c++17 :exports both
#include <iostream>
#include <vector>
#include <cassert>

template <typename T>
bool sorted(std::vector<T> xs) {
  for (std::size_t i = 0; i < xs.size() - 1; i++) {
    if (xs[i] > xs[i + 1]) return false;
  }
  return true;
}

template <typename T>
bool is_in(T x, std::vector<T> xs, int start, int end) {
  if (start >= xs.size() || start > end) {
    return false;
  }

  if (x == xs[start]) {
    return true;
  }

  return is_in(x, xs, start + 1, end);
}

template <typename T>
int binary_search(T x, std::vector<T> xs) {
  assert(sorted(xs) && "Pre-condition broken: input list is not sorted!");
  int index = -1;
  int start = 0;
  int end = xs.size() - 1;

  while (start <= end) {
    assert((!is_in(x, xs, 0, xs.size() - 1) || is_in(x, xs, start, end))
	   && "Loop invariant broken: element is not in sublist");
    int mid = (start + end) / 2;
    if (x == xs[mid]) {
      index = mid;
      break;
    }

    if (x < xs[mid]) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }
  
  assert((index < 0 || (index < xs.size() && xs[index] == x))
	 && "Post-condition broken: index returned is wrong!");
  
  return index;
}

int main() {
  std::vector<int> xs = {1, 2, 3, 4, 5, 6, 7};
  for (int x : xs) {
    std::cout << binary_search(x, xs) << std::endl;
  }
  std::cout << binary_search(8, xs) << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
: 5
: 6
: -1

- Note que esta abordagem tem seus limites: precisamos executar o código sob algumas entradas para testar
- Existe uma área da computação, *Métodos Formais*, que lida com este tipo de verificação, visando um processo automatizado

*** Exercício: Ordenação

- Considere o algoritmo de ordenação Bubblesort
- Quais as pré-condições?
- Quais as pós-condições?
- Quais os invariantes de loop, isto é as propriedades mantidas a cada iteração do loop?
