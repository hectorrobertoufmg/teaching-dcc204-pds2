#+title: Notas de Aula - 16 POO: Herança e Composição (parte 2)
#+author: Luigi D. C. Soares
#+startup: entitiespretty
#+options: toc:nil  num:nil
#+property: header-args :exports both :results scalar :wrap example
* Herança vs Composição (Recapitulando)

- Herança modela uma relação do tipo *é um* (is-a)
- Composição modela uma relação do tipo *tem um* (has-a)

Como escolher entre herança e composição?

- O tipo B vai manter todo o contrato do A, e poderá ser usado onde A é esperado (Princípio de Substituição de Liskov)? Se sim, *herança*
- O tipo B deseja apenas utilizar *parte* do comportamento exposto pelo tipo A? Então, *composição*

Algumas recomendações para o uso de herança:
 
- Mova interfaces, dados e comportamentos comuns o mais alto possível na hierarquia
- Suspeite e classes base com apenas uma classe derivada
- Evite hierarquia muito profundas (aumenta acoplamento)
- Atenção ao encapsulamento: para cada membro da classe base, ele será visível na classe derivada?

* Classes e Métodos Abstratos

- Uma classe abstrata *não pode ser instanciada*, ela apenas representa um conceito abstrato

  Exemplo: uma classe Numero abstrai o conceito de números. Números podem ser do tipo Inteiro ou Real, que são subclasses. Nós instanciamos um Inteiro/Real, não um Numero genérico.
  
- Um *método* abstrato normalmente é um método que não possui implementação, apenas um *contrato*. Em C++, isso vai ser um pouco mais "fraco": um método será abstrato se exigir que classes derivadas o implementem.
- Classes que possuem pelo menos um método abstrato são classes abstratas
- Subclasses de uma classe abstrata devem implementar os métodos abstratos que a superclasse define (ou se tornarão abstratas também)

Algumas linguagens, como Java, possuem uma palavra-chave para classes e métodos abstratos. Em C++, vamos usar a palavra-chave ~virtual~.

Uma classe abstrata, em C++, é uma classe que possui pelo menos um método *virtual puro*:

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <string>

class Animal {
public:
  Animal(std::string name) : name_(name) {}
  void eat() {
    std::cout << name_ << " is eating." << std::endl;
  }
  virtual void say() = 0;
  virtual ~Animal() {}

protected:
  std::string name_;
};

class Dog : public Animal {
public:
  Dog(std::string name) : Animal(name) {}
  void say() {
    std::cout << name_ << " says woof!" << std::endl;
  }
};

class Cat : public Animal {
public:
  Cat(std::string name) : Animal(name) {}
  void say() {
    std::cout << name_ << " says meow!" << std::endl;
  }
};

int main() {
  // error: cannot declare variable ‘a’ to be of abstract type ‘Animal’
  // Animal a("dog");

  Animal *dog = new Dog("dog");
  Animal *cat = new Cat("cat");

  dog->eat();
  dog->say();

  std::cout << std::endl;

  cat->eat();
  cat->say();

  delete dog;
  delete cat;
  
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
dog is eating.
dog says woof!

cat is eating.
cat says meow!
#+end_example

Uma classe abstrata não necessariamente precisa ter algum método abstrato. Em outras linguagens isso é mais claro, em C++ uma classe abstrata precisa ter pelo menos um método virtual puro. Porém, em C++ métodos virtuais puros podem ter um corpo (note que, ainda assim, é necessário que classes derivadas o implementem! Não estamos quebrando a definição vista acima).

Para definir uma classe abstrata "sem" métodos abstratos em C++, podemos declarar o destrutor como virtual puro. Ainda que você não implemente o destrutor nas classes derivadas, o compilador vai gerar um destrutor padrão, então vai funcionar!

#+begin_src C++ :flags -std=c++17
#include <iostream>

class A {
public:
  void foo() {
    std::cout << "Foo" << std::endl;
  }
  virtual ~A() = 0; // pure virtual destructor, "abstract"
};

A::~A() {}

class B : public A {};

int main() {
  // error: cannot declare variable ‘a’ to be of abstract type ‘A’
  // A a;
  B b;
  b.foo();
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Foo
#+end_example

*Importante:* é uma boa prática sempre declarar o destrutor como virtual quando existe algum outro método virtual (mesmo que não puro)
- Por quê?
- Lembra do que acontece quando chamamos um método não-virtual usando um ponteiro para a classe Base?

  #+begin_src C++ :flags -std=c++17
  #include <iostream>

  class Base {
  public:
    ~Base() {
      std::cout << "~Base()" << std::endl;
    }
  };

  class Derivada : public Base {
  public:
    ~Derivada() {
      std::cout << "~Derivada()" << std::endl;
    }
  };

  int main() {
    Base *b = new Derivada();
    delete b;
    return 0;
  }
  #+end_src

  #+RESULTS:
  #+begin_example
  ~Base()
  #+end_example

O destrutor chamado foi apenas o da Base!!! Ou seja, objetos que precisariam ser destruídos na classe Derivada não serão!

Com destrutor virtual:

#+begin_src C++ :flags -std=c++17
#include <iostream>

class Base {
public:
  virtual ~Base() {
    std::cout << "~Base()" << std::endl;
  }
};

class Derivada : public Base {
public:
  ~Derivada() {
    std::cout << "~Derivada()" << std::endl;
  }
};

int main() {
  Base *b = new Derivada();
  delete b;
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
~Derivada()
~Base()
#+end_example

* Interfaces

- Possuem unicamente o papel de um *contrato*
- Uma interface "I" descreve tudo que um objeto precisa implementar para ser considerado um "I"
- Uma interface possui apenas a declaração *operações públicas* (sem dados, sem modificadores protected e private)
- Algumas linguagens (e.g. Java) possuem uma palavra-chave para a definição de interfaces. Não é o caso de C++. Em C++, não existe uma distinção sintática entre classe abstrata e interface, apenas distinção semântica: uma interface é uma classe que contém *apenas* métodos puramente virtuais.

Exemplo: Um MusicPlayer e um VideoPlayer possuem alguns comportamentos em comum. Quais?

#+begin_src C++ :flags -std=c++17
#include <iostream>

// Interface
class Playable {
public:
  virtual void play() = 0;
  virtual void pause() = 0;

  // Toda interface deve implementar um destrutor virtual!
  virtual ~Playable() {} 
};

// MusicPlayer *é* Playable
class MusicPlayer : public Playable {
public:
  void play() {
    std::cout << "Music is playing." << std::endl;
  }

  void pause() {
    std::cout << "Music playback paused." << std::endl;
  }
};

// VideoPlayer *é* Playable
class VideoPlayer : public Playable {
public:
  void play() {
    std::cout << "Video is playing." << std::endl;
  }

  void pause() {
    std::cout << "Video playback paused." << std::endl;
  }
};

int main() {
  MusicPlayer mp;
  mp.play();
  mp.pause();
  
  VideoPlayer vp;
  vp.play();
  vp.pause();
  
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Music is playing.
Music playback paused.
Video is playing.
Video playback paused.
#+end_example

MusicPlayer e VideoPlayer poderiam, também, ter uma função de gravar.
- Faz sentido colocar esta operação em ~Playable~?
- Podemos ter uma classe implementado duas interfaces? Herança múltipla (um caso que faz sentido!)

#+begin_src C++ :flags -std=c++17 :results silent
#include <iostream>

// Interface
class Playable {
public:
  virtual void play() = 0;
  virtual void pause() = 0;

  // Toda interface deve implementar um destrutor virtual!
  virtual ~Playable() {} 
};

// Outra interface
class Recordable {
public:
  virtual void record() = 0;
  virtual ~Recordable() {}
};

// MusicPlayer *é* Playable
class MusicPlayer : public Playable, public Recordable {
public:
  void play() {
    std::cout << "Music is playing." << std::endl;
  }

  void pause() {
    std::cout << "Music playback paused." << std::endl;
  }
};

// VideoPlayer *é* Playable
class VideoPlayer : public Playable, public Recordable {
public:
  void play() {
    std::cout << "Video is playing." << std::endl;
  }

  void pause() {
    std::cout << "Video playback paused." << std::endl;
  }
};

int main() {
  MusicPlayer mp;
  mp.play();
  mp.pause();
  
  VideoPlayer vp;
  vp.play();
  vp.pause();
  
  return 0;
}
#+end_src

#+RESULTS:

#+begin_example
error: cannot declare variable ‘mp’ to be of abstract type ‘MusicPlayer’
error: cannot declare variable ‘vp’ to be of abstract type ‘VideoPlayer’
#+end_example

Hmm, o que deu errado? Volte ao código para identificar o que esquecemos.

#+begin_src C++ :flags -std=c++17
#include <iostream>

// Interface
class Playable {
public:
  virtual void play() = 0;
  virtual void pause() = 0;

  // Toda interface deve implementar um destrutor virtual!
  virtual ~Playable() {} 
};

// Outra interface
class Recordable {
public:
  virtual void record() = 0;
  virtual ~Recordable() {}
};

// MusicPlayer *é* Playable
class MusicPlayer : public Playable, public Recordable {
public:
  void play() {
    std::cout << "Music is playing." << std::endl;
  }

  void pause() {
    std::cout << "Music playback paused." << std::endl;
  }

  void record() {
    std::cout << "Recording music." << std::endl;
  }
};

// VideoPlayer *é* Playable
class VideoPlayer : public Playable, public Recordable {
public:
  void play() {
    std::cout << "Video is playing." << std::endl;
  }

  void pause() {
    std::cout << "Video playback paused." << std::endl;
  }
  
  void record() {
    std::cout << "Recording video." << std::endl;
  }
};

int main() {
  MusicPlayer mp;
  mp.play();
  mp.record();
  mp.pause();
  
  VideoPlayer vp;
  vp.play();
  vp.record();
  vp.pause();
  
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Music is playing.
Recording music.
Music playback paused.
Video is playing.
Recording video.
Video playback paused.
#+end_example

* + Boas Práticas: SOLID

*Créditos*: Os exemplos foram retirados do vídeo https://www.youtube.com/watch?v=pTB30aXS77U

Vimos anteriormente o Princípio da Responsabilidade Única (SRP), o "S" de SOLID. Vamos retomar o exemplo que utilizamos:

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <map>
#include <vector>

struct Item {
  unsigned code;
  std::string name;
  float price;
};

class Order {
public:
  enum class Status { open, paid };
  Status status = Status::open;

  void add_item(Item item) {
    _items_quantities.insert({item, 0});
    _items_quantities[item]++;
  }

  float total_price() const {
    float total = 0.0;
    for (auto [item, quantity] : _items_quantities) {
      total += item.price * quantity;
    }
    return total;
  }

private:
  class _ItemComparator {
  public:
    bool operator()(const Item &a, const Item &b) const {
      return a.name < b.name;
    }
  };

  std::map<Item, unsigned, _ItemComparator> _items_quantities;
};

class PaymentProcessor {
public:
  void pay(std::string payment_type, Order &order) {
    if (payment_type == "debit") {
      std::cout << "Processing debit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    } else if (payment_type == "credit") {
      std::cout << "Processing credit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    }
  }
};

int main() {
  Order order;

  order.add_item({0, "Notebook", 5000.50});
  order.add_item({0, "TV 4K", 8764.50});

  std::cout << "$" << order.total_price() << std::endl;

  PaymentProcessor processor;
  processor.pay("credit", order);

  return 0;
}
#+end_src

  #+RESULTS:
  #+begin_example
  $13765
  Processing credit payment type
  #+end_example

Antes de prosseguir, vamos fazer uma pequena modificação no exemplo: tanto pagamento por crédito quanto por débito requer um "código de segurança":

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <map>
#include <vector>

struct Item {
  unsigned code;
  std::string name;
  float price;
};

class Order {
public:
  enum class Status { open, paid };
  Status status = Status::open;

  void add_item(Item item) {
    _items_quantities.insert({item, 0});
    _items_quantities[item]++;
  }

  float total_price() const {
    float total = 0.0;
    for (auto [item, quantity] : _items_quantities) {
      total += item.price * quantity;
    }
    return total;
  }

private:
  class _ItemComparator {
  public:
    bool operator()(const Item &a, const Item &b) const {
      return a.name < b.name;
    }
  };

  std::map<Item, unsigned, _ItemComparator> _items_quantities;
};

class PaymentProcessor {
public:
  void pay(std::string payment_type, Order &order, std::string security_code) {
    std::cout << "Verifying security code: " << security_code << std::endl;
    if (payment_type == "debit") {
      std::cout << "Processing debit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    } else if (payment_type == "credit") {
      std::cout << "Processing credit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    }
  }
};

int main() {
  Order order;

  order.add_item({0, "Notebook", 5000.50});
  order.add_item({0, "TV 4K", 8764.50});

  std::cout << "$" << order.total_price() << std::endl;

  PaymentProcessor processor;
  processor.pay("credit", order, "123456");

  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
$13765
Verifying security code: 123456
Processing credit payment type
#+end_example
  
** "O": Open for Extension/Closed for Modification

Observe a classe ~PaymentProcessor~: podemos realizar o pagamento tanto por crédito quanto por débito. Suponha que, inicialmente, estas eram as duas formas de pagamento disponíveis. O sistema está funcionando como deveria já há algum tempo. Eventualmente, uma nova forma de pagamento é solicitada: PayPal. Note que PayPal não utiliza código de segurança, mas sim um endereço de email.

Como implementar?

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <map>
#include <vector>

struct Item {
  unsigned code;
  std::string name;
  float price;
};

class Order {
public:
  enum class Status { open, paid };
  Status status = Status::open;

  void add_item(Item item) {
    _items_quantities.insert({item, 0});
    _items_quantities[item]++;
  }

  float total_price() const {
    float total = 0.0;
    for (auto [item, quantity] : _items_quantities) {
      total += item.price * quantity;
    }
    return total;
  }

private:
  class _ItemComparator {
  public:
    bool operator()(const Item &a, const Item &b) const {
      return a.name < b.name;
    }
  };

  std::map<Item, unsigned, _ItemComparator> _items_quantities;
};

class PaymentProcessor {
public:
  void pay(std::string payment_type, Order &order, std::string security_code) {
    std::cout << "Verifying email address: " << security_code << std::endl;
    if (payment_type == "debit") {
      std::cout << "Processing debit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    } else if (payment_type == "credit") {
      std::cout << "Processing credit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    } else if (payment_type == "paypal") {
      std::cout << "Processing paypal payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
    }
  }
};

int main() {
  Order order;

  order.add_item({0, "Notebook", 5000.50});
  order.add_item({0, "TV 4K", 8764.50});

  std::cout << "$" << order.total_price() << std::endl;

  PaymentProcessor processor;
  processor.pay("paypal", order, "lebron.james@gmail.com");

  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
$13765
Verifying email address: lebron.james@gmail.com
Processing paypal payment type
#+end_example

Você consegue perceber algo estranho? Este é um exemplo ilustrativo, em um sistema real existiria, de fato, verificações do código de segurança. Mas, acabamos de trocar (acidentalmente) esta verificação por uma verificação de endereço de email. Agora, clientes antigos da classe PaymentProcessor irão parar de funcionar!!!

O ponto aqui é: a classe PaymentProcessor funcionava como deveria, estava estável! Qualquer mudança que a gente realize na implementação desta classe pode quebrar o funcionamento, impactando clientes que já utilizam a classe há muito tempo!

Isto nos leva ao princípio Open/Closed: uma classe deve ser *fechada para modificações* e *aberta para extensões*.

Como refatorar? Podemos transformar PaymentProcessor em uma interface!

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <map>
#include <vector>

struct Item {
  unsigned code;
  std::string name;
  float price;
};

class Order {
public:
  enum class Status { open, paid };
  Status status = Status::open;

  void add_item(Item item) {
    _items_quantities.insert({item, 0});
    _items_quantities[item]++;
  }

  float total_price() const {
    float total = 0.0;
    for (auto [item, quantity] : _items_quantities) {
      total += item.price * quantity;
    }
    return total;
  }

private:
  class _ItemComparator {
  public:
    bool operator()(const Item &a, const Item &b) const {
      return a.name < b.name;
    }
  };

  std::map<Item, unsigned, _ItemComparator> _items_quantities;
};

class PaymentProcessor {
public:
  virtual void pay(Order &order, std::string security_code) = 0;
  virtual ~PaymentProcessor() {}
};

class DebitPaymentProcessor : public PaymentProcessor {
public:
  void pay(Order &order, std::string security_code) {
      std::cout << "Verifying security code: " << security_code << std::endl;
      std::cout << "Processing debit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
};

class CreditPaymentProcessor : public PaymentProcessor {
public:
  void pay(Order &order, std::string security_code) {
      std::cout << "Verifying security code: " << security_code << std::endl;
      std::cout << "Processing credit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
};

class PaypalPaymentProcessor : public PaymentProcessor {
public:
  void pay(Order &order, std::string email) {
      std::cout << "Verifying email adress: " << email << std::endl;
      std::cout << "Processing paypal payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
};

int main() {
  Order order;

  order.add_item({0, "Notebook", 5000.50});
  order.add_item({0, "TV 4K", 8764.50});

  std::cout << "$" << order.total_price() << std::endl;

  PaymentProcessor *processor = new PaypalPaymentProcessor();
  processor->pay(order, "lebron.james@gmail.com");

  delete processor;
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
$13765
Verifying email adress: lebron.james@gmail.com
Processing paypal payment type
#+end_example

*Importante: você não deve levar este princípio ao pé da letra*

- Se levarmos o princípio open/closed ao pé da letra (conforme descrito acima), o que faríamos para corrigir um bug no código? Já que não podemos modificar o código... não faz sentido! Se existe algo errado na classe/módulo, você *deve corrigir*, e não introduzir uma nova classe com o comportamento correto, deixando a original incorreta.

- Se você têm controle sobre o software original e pode reescrevê-lo de modo a atender novas demandas, *sem causar nenhum problema*, você deve fazer.

O princípio open/closed serve para guiar o design do sistema de modo a tornâ-lo facilmente extensível.

** "L": Princípio de Substituição de Liskov

Você nota algo ainda estranho na nossa implementação dos diferentes meios de pagamento?

Pense: DebitPaymentProcessor, CreditPaymentProcessor e PaypalPaymentProcessor *são* PaymentProcessors. Logo, deveríamos conseguir substituir qualquer uso de PaymentProcessor pelas subclasses especializadas.

No nosso exemplo, foi possível utilizar um ponteiro para payment processor. Ainda assim, estamos violando um princípio. Esta violação é semântica, não sintática! O contrato estabelecido por PaymentProcessor diz que o método de pagamento é parametrizado por um pedido e por um código de segurança. Mas, paypal não utiliza código de segurança, e sim um email!

Note a diferença:

#+begin_src C++ :flags -std=c++17 :results silent
// (1)
PaymentProcessor *processor = new CreditPaymentProcessor();
processor->pay(order, "123456");

// (2)
PaymentProcessor *processor = new DebitPaymentProcessor();
processor->pay(order, "123456");

// (3)
PaymentProcessor *processor = new PaypalPaymentProcessor();
processor->pay(order, "lebron.james@gmail.com");
#+end_src

(1) e (2) respeitam a semântica do contrato estabelecido por PaymentProcessor. Logo, poderíamos fazer a substituição. Mas, (3) não respeita! Ainda estamos passando uma string (sintaticamente correto), mas o *significado* dessa string é diferente!

Estamos ferindo o Princípio de Substituição de Liskov: um objeto de um tipo T deve poder ser substituído por um objeto de um subtipo S sem alterar nenhuma propriedade do programa. Em outras palavras, "os tipos T e S são intercambiáveis?"

Solucionar este problema no nosso exemplo é trivial, basta remover o parâmetro ~security_code~ da interface:

#+begin_src C++ :flags -std=c++17
#include <iostream>
#include <map>
#include <vector>

struct Item {
  unsigned code;
  std::string name;
  float price;
};

class Order {
public:
  enum class Status { open, paid };
  Status status = Status::open;

  void add_item(Item item) {
    _items_quantities.insert({item, 0});
    _items_quantities[item]++;
  }

  float total_price() const {
    float total = 0.0;
    for (auto [item, quantity] : _items_quantities) {
      total += item.price * quantity;
    }
    return total;
  }

private:
  class _ItemComparator {
  public:
    bool operator()(const Item &a, const Item &b) const {
      return a.name < b.name;
    }
  };

  std::map<Item, unsigned, _ItemComparator> _items_quantities;
};

class PaymentProcessor {
public:
  virtual void pay(Order &order) = 0;
  virtual ~PaymentProcessor() {}
};

class DebitPaymentProcessor : public PaymentProcessor {
public:
  DebitPaymentProcessor(std::string security_code)
    : _security_code(security_code) {}
  
  void pay(Order &order) {
      std::cout << "Verifying security code: " << _security_code << std::endl;
      std::cout << "Processing debit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
  
private:
  std::string _security_code;
};

class CreditPaymentProcessor : public PaymentProcessor {
public:
  CreditPaymentProcessor(std::string security_code)
    : _security_code(security_code) {}

  void pay(Order &order) {
      std::cout << "Verifying security code: " << _security_code << std::endl;
      std::cout << "Processing credit payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
  
private:  
  std::string _security_code;
};

class PaypalPaymentProcessor : public PaymentProcessor {
public:
  PaypalPaymentProcessor(std::string email)
    : _email(email) {}
  
  void pay(Order &order) {
      std::cout << "Verifying email adress: " << _email << std::endl;
      std::cout << "Processing paypal payment type" << std::endl;
      // Outras coisas...
      order.status = Order::Status::paid;
  }
  
private:
  std::string _email;
};

int main() {
  Order order;

  order.add_item({0, "Notebook", 5000.50});
  order.add_item({0, "TV 4K", 8764.50});

  std::cout << "$" << order.total_price() << std::endl;

  PaymentProcessor *processor = new PaypalPaymentProcessor("lebron.james@gmail.com");
  processor->pay(order);

  delete processor;
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
$13765
Verifying email adress: lebron.james@gmail.com
Processing paypal payment type
#+end_example

*** Exemplo 2: Quadrado é um Retângulo?

O exemplo acima talvez seja muito superficial, já que, apesar da distinção semântica entre email e código de segurança, não conseguimos ver nenhum possível problema na prática. Vamos analisar um exemplo clássico:

- Considere uma classe retângulo que possui largura, altura, sabe calcular sua área, e também podemos redimensionar.
- Esse redimensionamento naturalmente possui uma pós-condição: alterar a largura não deve impactar na altura e vice-versa.
- Para testar, vamos implementar uma função que recebe um retângulo, altera sua largura e altura, e calcula a nova área.

#+begin_src C++ :flags -std=c++17 :exports both
#include <cassert>
#include <iostream>

class Rectangle {
public:
  // pós-condição: a altura deve permanecer inalterada
  virtual void set_width(float width) {
    _width = width;
  }

  // pós-condição: a largura deve permanecer inalterada
  virtual void set_height(float height) {
    _height = height;
  }

  float area() const {
    return _width * _height;
  }

protected:
  float _width;
  float _height;
};

bool test(Rectangle *r) {
  r->set_width(1);
  r->set_height(2);
  std::cout << "Area = " << r->area() << std::endl;
  return r->area() == 2;
}

int main() {
  Rectangle r;
  std::cout << (test(&r) ? "OK" : "FAIL") << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Area = 2
OK
#+end_example

Perfeito, nossa implementação funciona, podemos redimensionar o retângulo e calcular a área dele.

Matematicamente, um quadrado *é um* retângulo. Já que a relação é "é um", parece fazer sentido utilizar herança para implementar um quadrado. Porém, precisaremos sobrescrever os métodos ~set_width~ e ~set_height~ para garantir que o quadrado continue sendo um quadrado, isto é, tenha os lados iguais.

Já dá para notar que tem algo no mínimo estranho. Um quadrado não deveria precisar de dois métodos para alterar seus lados. Vamos ignorar isso por enquanto e acreditar que está tudo correto. Um quadrado *é um* retângulo, então deveríamos conseguir passar um quadrado para a função de teste (ou seja, onde estamos utilizando o tipo Rectangle, deve ser possível utilizar Square sem nenhum problema; esse é o princípio de substituição de Liskov). Vamos testar isso:

#+begin_src C++ :flags -std=c++17 :exports both
#include <iostream>

class Rectangle {
public:
  // pós-condição: a altura deve permanecer inalterada
  virtual void set_width(float width) {
    _width = width;
  }

  // pós-condição: a largura deve permanecer inalterada
  virtual void set_height(float height) {
    _height = height;
  }

  float area() const {
    return _width * _height;
  }

protected:
  float _width;
  float _height;
};

class Square : public Rectangle {
public:
  void set_width(float width) override {
    Rectangle::set_width(width);
    Rectangle::set_height(width);
  }
  void set_height(float height) override {
    Rectangle::set_width(height);
    Rectangle::set_height(height);
  }
};

bool test(Rectangle *r) {
  r->set_width(1);
  r->set_height(2);
  std::cout << "Area = " << r->area() << std::endl;
  return r->area() == 2;
}

int main() {
  Square s;
  std::cout << (test(&s) ? "OK" : "FAIL") << std::endl;
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Area = 4
FAIL
#+end_example

Algo falhou... o resultado que esperávamos para a área do retângulo era 2, já que alteramos sua altura para 1 e sua largura para 2. O ponto é que a implementação do subtipo Square *não obedece* o contrato estabelecido pelo supertipo Rectangle: a pós-condição em cada método também é parte do contrato!

Apesar de matematicamente um quadrado ser um retângulo, estamos modelando um retângulo *redimensionável*, e um quadrado *não é um retângulo redimensionável*. Não conseguimos substituir o subtipo Square onde aparecia o supertipo Rectangle, porque a definição de Square não está em conformidade com os contratos estabelecidos por Rectangle!

Da forma que implementamos, introduzimos um comportamento inesperado ao uso de Rectangle. Esta é uma clara violação do princípio de substituição de Liskov.

*** Exemplo 3: Liskov não é sobre Classes, é sobre Contratos!

Os erros causados pela quebra do princípio de substituição de Liskov nos exemplos acima não são erros possíveis de serem identificados durante o processo de compilação, são erros mais sutis. Mas a violação deste princípio pode ser observada de forma gritante quando acontece algum erro durante a compilação do sistema.

Um outro ponto que vale ressaltar é que o princípio de substituição de Liskov *não diz respeito apenas a classes*, mas sim a *contratos* que devem ser respeitados. Para ilustrar (e variar um pouquinho), vamos ver um caso em Python. Python possui uma função *map* que recebe uma função e uma coleção (lista, conjunto, etc), e aplica em cada elemento da coleção a função que foi passada. Por exemplo, imagine que temos uma função ~square(x) = x^2~.

#+begin_example
map(square, [1, 2, 3]) => [2, 4, 6]
#+end_example

Vamos ver o código em Python:

#+begin_src python :results output :exports both
def square(x):
    return x * x;

xs = [1, 2, 3]
print(list(map(square, xs)))
#+end_src

#+RESULTS:
#+begin_example
[1, 4, 9]
#+end_example

Acima estamos aplicando map em uma lista. Podemos aplicar também em um tupla (tuplas são coleções heterogêneas, podemos elementos de tipos diferentes). Observe o código a seguir:

#+begin_src python :results silent
def square(x):
    return x * x;

xs = (23, "a")
print(tuple(map(square, xs)))
#+end_src

A aplicação de ~square~ ao elemento "a" não funciona, obtemos um erro durante a execução:

#+begin_example
TypeError: can't multiply sequence by non-int of type 'str'
#+end_example

Essa também é uma violação do princípio de substituição de Liskov: a função que passamos para o ~map~ não está em conformidade com o que o ~map~ esperava (uma função que seja aplicável a todos os elementos da coleção).

O erro nesse exemplo é bem claro, mas poderia ser algo mais sutil. Imagine que temos uma lista de listas e vamos aplicar uma função a cada sublista. Esta função recebe uma lista de inteiros, percorre cada elemento e calcula o quadrado.

Assuma para este exemplo que o ~map~ possui como pós-condição que a coleção original esteja inalterada, e uma nova coleção tenha sido construída (afinal de contas, o ~map~ retorna uma nova coleção).

#+begin_src python :results output :exports both
def square(x):
    return x * x

def square_list(xs):
    i = 0
    while i < len(xs):
        xs[i] = square(xs[i])
        i = i + 1
    return xs

xss = [[1, 2], [3, 4]]
print(list(map(square_list, xss)))
#+end_src

#+RESULTS:
#+begin_example
[[1, 4], [9, 16]]
#+end_example

Parece que funcionou, certo? Mas o que será que aconteceu com o ~xss~ original?

#+begin_src python :results output :exports both
def square(x):
    return x * x

def square_list(xs):
    i = 0
    while i < len(xs):
        xs[i] = square(xs[i])
        i = i + 1
    return xs

xss = [[1, 2], [3, 4]]
print(list(map(square_list, xss)))
print(xss)
#+end_src

#+RESULTS:
#+begin_example
[[1, 4], [9, 16]]
[[1, 4], [9, 16]]
#+end_example

A coleção original também foi alterada!!! Se precisássemos utilizá-la (a versão original) após o map, teríamos problemas!

** "I" e "D"

Os princípios restantes são o de Segregação de Interface ( *I* nterface segration ) e Inversão de Depedendências ( *D* ependency inversion). Não vamos cobrir os princípios restantes nesta aula, mas recomendo fortemente que estudem por conta própria. O vídeo utilizado como referência cobre todos os cinco princípios, e também passa por composição em um dos exemplos. É um ótimo ponto de partida!
